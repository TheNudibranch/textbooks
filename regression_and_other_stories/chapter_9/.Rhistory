install.packages('rstanarm)
install.packages('rstanarm')
library('rstanarm')
parallel::detectCores()
fit <- stan_glm(
mpg10 ~ wt + cyl + am,
data = mtcars,
QR = TRUE,
# for speed of example only (default is "sampling")
algorithm = "fullrank",
refresh = 0
)
data("mtcars")
mtcars$mpg10 <- mtcars$mpg / 10
fit <- stan_glm(
mpg10 ~ wt + cyl + am,
data = mtcars,
QR = TRUE,
# for speed of example only (default is "sampling")
algorithm = "fullrank",
refresh = 0
)
fit <- stan_glm(
mpg10 ~ wt + cyl + am,
data = mtcars,
refresh = 0
)
library('bayesplot')
library('loo')
fit <- stan_glm(
mpg10 ~ wt + cyl + am,
data = mtcars
)
print(fit)
View(fit)
fit$stanfit$cyl
fit$stanfit$cyl
fit$stanfit
fit$stanfit$wt[1]
draws <- as.matrix(fit)
hist(draws[,1])
sd(draws[,1])
library('rstanarm', queitly=T)
library('rstanarm', quietly=T)
library('rstanarm', quietly=T, warn.conflicts = T)
library('rstanarm', quietly=T, warn.conflicts = F)
burn <- 1e3
par(mfrow=c(1,2))
posterior.oxy <- density(chain[-seq(1,burn), 1])
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 100 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
b.depth <- -0.6
b.int <- 0.4
lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,2))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
fit <- glm(y ~ standardize(x.oxy) + standardize(x.depth), family=poisson())
summary(fit)
log.poi.liklihood <- function(params){
lam_cands <- exp(params[['b.oxy.cand']]*standardize(x.oxy) +
params[['b.depth.cand']]*standardize(x.depth) +
params[['b.int.cand']])
return(sum(dpois(y, lam_cands, log=T)))
}
log.prior <- function(params){
return(
dnorm(params[['b.oxy.cand']], 0.5, 1, log=T) +
dnorm(params[['b.depth.cand']], -0.5, 1, log=T) +
dnorm(params[['b.int.cand']], 0, 10, log=T)
)
}
log.posterior.prob <- function(params){
return(log.prior(params) + log.poi.liklihood(params))
}
mcmc_chain <- function(N_sim, explore_param){
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
chain <- matrix(NA, nrow=N_sim, ncol=3)
for (i in 1:N_sim){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N_sim)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], explore_param),
b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], explore_param),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], explore_param)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
return(chain)
}
N_sim <- 1e4
N_chains <- 4
posterior_samples <- array(NA, c(N_sim, 3, N_chains))
chain <- mcmc_chain(N_sim, explore_param = 0.1)
burn <- 1e3
par(mfrow=c(1,2))
posterior.oxy <- density(chain[-seq(1,burn), 1])
plot(posterior.oxy, lwd = 4, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
polygon(posterior.oxy, col=adjustcolor('darkgreen', 0.5))
abline(v=0.8, col='red', lwd=4)
posterior.depth <- density(chain[-seq(1,burn), 2])
plot(posterior.depth, lwd = 4, xlab='', ylab='', main='Posterior for Depth Paramter')
polygon(posterior.depth, col=adjustcolor('darkblue', 0.5))
abline(v=-0.6, col='red', lwd=4)
# posterior.int <- density(chain[-seq(1,burn), 3])
# plot(posterior.int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
# polygon(posterior.int, col=adjustcolor('darkred', 0.5))
# abline(v=0.4, col='red', lwd=4)
par(mfrow=c(1,1))
posterior.int <- density(chain[-seq(1,burn), 3])
plot(posterior.int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
polygon(posterior.int, col=adjustcolor('darkred', 0.5))
abline(v=0.4, col='red', lwd=4)
log.poi.liklihood <- function(params){
lam_cands <- exp(params[['b.oxy.cand']]*standardize(x.oxy) +
params[['b.depth.cand']]*standardize(x.depth) +
params[['b.int.cand']])
return(sum(dpois(y, lam_cands, log=T)))
}
log.prior <- function(params){
return(
dnorm(params[['b.oxy.cand']], 0.5, 1, log=T) +
dnorm(params[['b.depth.cand']], -0.5, 1, log=T) +
dnorm(params[['b.int.cand']], 0, 10, log=T)
)
}
log.posterior.prob <- function(params){
return(log.prior(params) + log.poi.liklihood(params))
}
mcmc_chain <- function(N_sim, explore_param){
curr_params <-  list(
b.oxy.cand = rnorm(1, 0, 4),
b.depth.cand = rnorm(1, 0, 4),
b.int.cand = rnorm(1, 0, 4)
)
chain <- matrix(NA, nrow=N_sim, ncol=3)
for (i in 1:N_sim){
if (i %% 1e3 == 0){
cat('\014')
cat(sprintf('%s%% Done', round(i*100/N_sim)))
}
cand_params <- list(
b.oxy.cand = rnorm(1, curr_params[['b.oxy.cand']], explore_param),
b.depth.cand = rnorm(1, curr_params[['b.depth.cand']], explore_param),
b.int.cand = rnorm(1, curr_params[['b.int.cand']], explore_param)
)
a <- min(1, exp(log.posterior.prob(cand_params) -
log.posterior.prob(curr_params)))
u <- runif(1)
if (u <= a){
chain[i,] <- unlist(cand_params)
curr_params <- cand_params
}
else{
chain[i,] <- unlist(curr_params)
}
}
return(chain)
}
N_sim <- 5e4
N_chains <- 4
posterior_samples <- array(NA, c(N_sim, 3, N_chains))
chain <- mcmc_chain(N_sim, explore_param = 0.01)
burn <- 5e3
par(mfrow=c(1,2))
posterior.oxy <- density(chain[-seq(1,burn), 1])
plot(posterior.oxy, lwd = 4, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
polygon(posterior.oxy, col=adjustcolor('darkgreen', 0.5))
abline(v=0.8, col='red', lwd=4)
posterior.depth <- density(chain[-seq(1,burn), 2])
plot(posterior.depth, lwd = 4, xlab='', ylab='', main='Posterior for Depth Paramter')
polygon(posterior.depth, col=adjustcolor('darkblue', 0.5))
abline(v=-0.6, col='red', lwd=4)
# posterior.int <- density(chain[-seq(1,burn), 3])
# plot(posterior.int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
# polygon(posterior.int, col=adjustcolor('darkred', 0.5))
# abline(v=0.4, col='red', lwd=4)
par(mfrow=c(1,1))
posterior.int <- density(chain[-seq(1,burn), 3])
plot(posterior.int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
polygon(posterior.int, col=adjustcolor('darkred', 0.5))
abline(v=0.4, col='red', lwd=4)
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 1000 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
b.depth <- -0.6
b.int <- 0.4
lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,2))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
# Function to standardize data
standardize <- function(x){
return((x - mean(x)) / sd(x))
}
N <- 500 # Number of ponds fished at
x.oxy <- rnorm(N, 5, 1) # Dissolved oxygen in mg per Liter
x.depth <- abs(rnorm(N, 30, 10)) # Pond depth
b.oxy <- 0.8
b.depth <- -0.6
b.int <- 0.4
lambda <- exp(b.oxy*standardize(x.oxy) + b.depth*standardize(x.depth) + b.int)
y <- rpois(length(lambda), lambda = lambda)
par(mfrow=c(1,2))
plot(x.oxy, y, pch=16, col='darkblue', ylab='Fish Caught Per Hour', xlab='Dissolved Oxygen (mg/L)')
plot(x.depth, y, pch=16, col='darkred', ylab='Fish Caught Per Hour', xlab='Pond Depth (m)')
burn
burn <- 2e4
par(mfrow=c(1,2))
posterior.oxy <- density(chain[-seq(1,burn), 1])
plot(posterior.oxy, lwd = 4, xlab='', ylab='', main='Posterior for Dissolved Oxygen Paramter')
polygon(posterior.oxy, col=adjustcolor('darkgreen', 0.5))
abline(v=0.8, col='red', lwd=4)
posterior.depth <- density(chain[-seq(1,burn), 2])
plot(posterior.depth, lwd = 4, xlab='', ylab='', main='Posterior for Depth Paramter')
polygon(posterior.depth, col=adjustcolor('darkblue', 0.5))
abline(v=-0.6, col='red', lwd=4)
# posterior.int <- density(chain[-seq(1,burn), 3])
# plot(posterior.int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
# polygon(posterior.int, col=adjustcolor('darkred', 0.5))
# abline(v=0.4, col='red', lwd=4)
par(mfrow=c(1,1))
posterior.int <- density(chain[-seq(1,burn), 3])
plot(posterior.int, lwd = 4, xlab='', ylab='', main='Posterior for Beta_0')
polygon(posterior.int, col=adjustcolor('darkred', 0.5))
abline(v=0.4, col='red', lwd=4)
plot(chain(-seq(1,burn)))
plot(chain(-seq(1,burn)))
burn
plot(chain[-seq(1,burn),3])
plot(chain[-seq(1,burn),3], type='l)
plot(chain[-seq(1,burn),3], type='l')
plot(chain[-seq(1,burn),3], type='l')
plot(chain[,3], type='l')
plot(chain[-seq(1,10),3], type='l')
plot(chain[-seq(1,100),3], type='l')
plot(chain[-seq(1,1000),3], type='l')
plot(chain[-seq(1,10000),3], type='l')
plot(chain[-seq(1,1000),3], type='l')
plot(chain[-seq(1,2000),3], type='l')
plot(chain[-seq(1,3000),3], type='l')
N_sim <- 1e4
N_sim <- 1e4
N_chains <- 4
posterior_samples <- array(NA, c(N_sim, 3, N_chains))
chain <- mcmc_chain(N_sim, explore_param = 0.01)
N_sim <- 1e4
N_chains <- 4
posterior_samples <- array(NA, c(N_sim, 3, N_chains))
chain <- mcmc_chain(N_sim, explore_param = 0.01)
simulation <- list()
for (i in 1:N_chains){
simulation[[paste0('chain_',i)]] <- mcmc_chain(N_sim, explore_param = 0.01)
}
names(simulation)
