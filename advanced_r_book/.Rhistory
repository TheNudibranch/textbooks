purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
purrr::some(1:100, ~sample(c(T,F), 1, prob = c(0.01, 0.99)))
a <- expr(function(x = TRUE) {
g(x + T)
})
a
a |> typeof()
a[[1]]
a[[1]] |> typeof()
a[[2]] |> typeof()
a[[2]]
a[[3]] |> typeof()
a[[4]] |> typeof()
a[[4]]
a[[4]] |> typeof()
a[[4]] |> class()
a[[3]]
a[[3]] |> typeof()
a[[4]] |> typeof()
a[[3]] |> typeof()
a[[2]] |> typeof()
a[[1]] |> typeof()
a[[3]]
is.call(a)
is.symbol(a)
a <- expr(names(x(y)) <- y <- z)
ast(expr_text(a))
ast(a)
ast(eval(a))
expr_text(a) |> ast()
expr_text(a)
ast("names(x(y)) <- y <- z")
ast
parse(text=a) |> ast()
fn
ast(names(x(y)) <- y <- z)
a <- expr(names(x(y)) <- y <- z)
a[[1]]
a[[2]]
a[[2]] |> typeof()
a[[2]] |> is.call()
a[[2]]
a[[2]][[1]]
a[[2]][[2]]
a[[2]][[2]] |> is.call()
#### Ch 19
library(purrr)
a <- `1+1`
a <- quote(1+1)
type_of(a)
typeof(a)
!!a
\(x) 1+1
help(substi)
help("substitute")
mode
f <- function(...) ensyms(...)
f(x)
f(x) |> typeof()
f(x)[[1]]
f(x)[[1]] |> typeof()
f('x')[[1]] |> typeof()
f(x = 3)[[1]] |> typeof()
f(x = 3)[[1]]
alist(x = 1, y = x + 1)
a <- alist(x = 1, y = x + 1)
a |> typeof()
a
a[[2]]
a[[2]] |> typeof()
a[[2]] |> is.call()
a[[1]] |> is.call()
a[[1]] |> typeof()
a <- alist(x = 1, y = x + 1, z = )
a |> typeof()
a
expr
enexpr
enexpr(x+y)
# 19.3.6
#a)
substitute(x)
# 19.3.6
#a)
substitute(x, env=current_env())
x
# 19.3.6
#a)
substitute(x, list(x=10))
# 19.3.6
#a)
substitute(x, env())
# 19.3.6
#a)
substitute(x, env(x=10))
# 19.3.6
#a)
substitute(x, env())
current_env()
current_env()$x
# 19.3.6
#a)
substitute(x, env())
x <- 10
# 19.3.6
#a)
substitute(x)
# 19.3.6
#a)
substitute(x, env())
#b)
foo <- function(x) substitute(x)
foo(a + b)
foo(a + b * sin(10))
foo(a + b *     sin(10))
#c)
substitute(x, env(x=7))
x <- 7
substitute(x, .GlobalEnv)
`!!`
!!x
`!!`(x)
`%in%`
x <- expr(4 + z)
expr(f(!!x, y))
# When in doubt use parentheses
f <- expr(foo)
expr((!!f)(x,y))
expr(!!f(x,y))
expr(df$!!x)
expr(df$(!!x))
expr(`$`(df, !!x))
x <- el_1
expr(`$`(df, !!x))
x <- expr(el_1)
expr(`$`(df, !!x))
xs <- exprs(1, a, -b)
expr(f(!!!xs, y))
ys <- set_names(xs, c('a', 'b', 'c'))
expr(f(!!!ys, d=4))
expr(f(!!!ys, y=4))
asNamespace('rlang')
a <- asNamespace('rlang')
a$`!!!`
# 19.4.8
xy <- expr(x+y); xz <- expr(x + z); yz <- expr(y + z); abc <- exprs(a,b,c)
expr(!!xy / !!yz)
expr(-!!xz^!!yz)
expr(-!!xz^(!!yz))
expr(-(!!xz)^(!!yz))
expr(-!!xz)
expr(-!!xz^2)
expr(-(!!xz)^2)
expr(-(!!xz)^!!yz)
expr(!!xy + !!yz - !!xy)
expr((!!xy) + !!yz - !!xy)
expr(atan2(!!xy, !! yz))
expr(sum(!!xy, !!xy, !!yz))
expr(sum(!!!abc))
expr(mean(c(!!!abc), na.rm=TRUE))
list(a=xy, b=yz)
a <- list(a=xy, b=yz)
expr(foo(!!!a))
x <- seq(0,2*pi)
plot(x, sin(x))
x <- seq(0,2*pi, length.out=1e3)
plot(x, sin(x))
plot(x, sin(x), type='l', lwd=3)
#### Ch 20
a <- '
x <- 1;y <- 2
x + y
'
parse_exprs(a) |> `[`(1)  typeof()
parse(text=a) |> typeof()
library(rlang)
library(lobstr)
expr
enexpr
# q 20.2 5
local3 <- function(expr, envir=new.env()){
# rm(expr)
call <- substitute(eval(quote(expr), envir))
call
# eval(call, envir=parent.frame())
}
local3(
{
x <- 1
y <- 2
x + y
}
)
q2 <- new_quosure(expr(x), env(x=1))
q3 <- new_quosure(expr(x), env(x=11))
x <- expr(!!q2 + !!q3)
x # Formula heriatage
x[[2]]
expr_print(x)
x <- expr(!!q2 + !!q3 + x)
x # Formula heriatage
x[[2]]
expr_print(x)
typeof(x)
x[[1]]
x[[2]]
x[[3]]
x[[4]]
class(x)
x[1]
x[2]
x[[2]]
x[[2]][[1]]
x[[2]][[2]]
x[[2]][[2]] |> class()
x[[2]][[2]] |> print.default()
x[[2]][[2]]
x[[2]][[2]][[1]]
x[[2]][[2]][[2]]
x[[2]][[2]][[3]]
x[[2]][[2]] |> quo_get_expr()
with
df <- data.frame(a=1,b=2, c=3, d=4, e=5)
select2(df, b:d)
select2 <- function(data,...){
dots <- enquos(...)
vars <- as.list(set_names(seq_along(data), names(data)))
cols <- unlist(purrr::map(dots, eval_tidy, vars))
df[,cols,drop=F]
return(dots)
}
df <- data.frame(a=1,b=2, c=3, d=4, e=5)
select2(df, b:d)
select2 <- function(data,...){
dots <- enquos(...)
vars <- as.list(set_names(seq_along(data), names(data)))
cols <- unlist(purrr::map(dots, eval_tidy, vars))
df[,cols,drop=F]
return(dots)
}
df <- data.frame(a=1,b=2, c=3, d=4, e=5)
select2(df, b:d)
a <- select2(df, b:d)
class(a)
a[[1]]
a[[1]] |> expr_print()
with(df, a+b)
with(df, a+b) |> sloop::s3_dispatch()
class(df)
UseMethod
help(UseMethod)
.Generic
asNamespace('base')$.Generic
asNamespace('base')
with.default
help(eval)
eval_tidy
f <- function(x){
expr(!!x)
}
f(a==3)
f(3)
f(ty)
f <- function(x){
enquo(x)
expr(!!x)
}
f(ty)
f <- function(x){
x <- enquo(x)
expr(!!x)
}
f(ty)
f <- quote(1 ~ rt)
f
class(f)
typeof(f)
f[[1]]
f[[1]] |> symbol()
f[[1]] |> is.symbol()
f[[2]]
f[[2]] |> typeof()
is
eval_tidy
.External2
eval(quote(a+b), df)
eval
eval(quote(a+b), df, emptyenv())
x <- delayedAssign(3)
delayedAssign
delayedAssign(x, 3)
help("delayedAssign")
delayedAssign('x', 3)
substitute(x + 4)
y <- 3
substitute(x + 4 + y)
substitute(quote(x + 4 + y))
f <- function(a){
substitute(a)
}
f(1+1)
f(x + y)
f <- function(a){
x <- 4
substitute(a)
}
f(x + y)
f <- function(a){
force(a)
substitute(a)
}
f(1+1)
f <- function(a){
a <- 2
substitute(a)
}
f(1+1)
f <- function(a){
typeof(a)
substitute(a)
}
f(1+1)
substitute
help("substitute")
f <- function(a){
x <- 3
typeof(a)
substitute(a + x)
}
f(1+1)
x <-
subst
x <- 3
substitute(1 + 1 + x)
delayedAssign('x', 1+1)
substitute(1 + 1 + x)
typeof(x)
delayedAssign
delayedAssign('x', 1+1, eval.env = emptyenv())
x
####################
#### Chapter 24
####################
apply
unlist
####################
#### Chapter 24
####################
mean
####################
#### Chapter 24
####################
mean.class
####################
#### Chapter 24
####################
mean.class()
mean.default
rowSums
####################
#### Chapter 24
####################
rowSums |> View()
seq_len(2)
.rowSums
chi``
chisq.test
setNames
rnorm
rnorm(10, 10:1)
crossprod
####################
#### Chapter 24
####################
library(bench)
x <- rnorm(1e3, mean=10)
x <- rnorm(1e3, mean=10)
w <- runif(1e3)
crossprod(x,w)
sum(x*w)
bench::mark(
a = crossprod(x,w),
b = sum(x*w)
)
crossprod(x,w)[1]
bench::mark(
a = crossprod(x,w)[1],
b = sum(x*w)
)
help("crossprod")
x <- rnorm(2e3, mean=10) |> matrix(ncol=2)
w <- runif(1e3)
crossprod(x,w)
sum(x*w)
x*w
colSums(x*w)
crossprod(x,w)
interaction()
interaction
interaction() |> help()
interaction |> help()
.set_row_names(4)
.set_row_names(40)
help(".set_row_names")
.set_row_names
quick_df <- function(l){
class(l) <- 'data.frame'
attr(l, 'row.names') <- .set_row_names(length(l[[1]]))
}
l <- lapply(1:26, \(x) runif(1e3))
names(l) <- letters
quick_df <- function(l){
class(l) <- 'data.frame'
attr(l, 'row.names') <- .set_row_names(length(l[[1]]))
l
}
l <- lapply(1:26, \(x) runif(1e3))
names(l) <- letters
quick_df(l)
quick_df(l) |> attributes()
.set_row_names(length(l[[1]]))
attr
.row_names_info()
.row_names_info
.row_names_info(quick_df(l))
help(".row_names_info")
bench::mark(
as.data.frame = as.data.frame(l),
quick_df = quick_df(l)
)
l <- lapply(1:26, \(x) runif(1e4))
names(l) <- letters
bench::mark(
as.data.frame = as.data.frame(l),
quick_df = quick_df(l)
)
l <- lapply(1:70, \(x) runif(1e4))
names(l) <- letters
names(l)
bench::mark(
as.data.frame = as.data.frame(l),
quick_df = quick_df(l)
)
length(l)
l <- lapply(1:70, \(x) runif(1e4))
names(l) <- pasteo('a_', seq(1:length(l)))
names(l) <- paste0('a_', seq(1:length(l)))
bench::mark(
as.data.frame = as.data.frame(l),
quick_df = quick_df(l)
)
l <- lapply(1:600, \(x) runif(1e4))
names(l) <- paste0('a_', seq(1:length(l)))
bench::mark(
as.data.frame = as.data.frame(l),
quick_df = quick_df(l)
)
l <- lapply(1:26, \(x) runif(1e3))
names(l) <- paste0('a_', seq(1:length(l)))
bench::mark(
as.data.frame = as.data.frame(l),
quick_df = quick_df(l)
)
x <- rnorm(2e3, mean=10) |> matrix(ncol=2)
a <- local(f <- function(x) x^2)
environment(a)
environment(a) |> rlang::env_print()
environment(a)
environment(a)$f
local
a <- local(f <- function(x) rlang::env_print(rlang::current_env()))
environment(a)$f
a <- local(f <- function(x) rlang::env_print(rlang::current_env()))
environment(a)$f
environment(a)
a(1)
####################
#### Chapter 24
####################
library(Rcpp)
View(rlang_downstream_check)
cppFunction()
cppFunction('
int add(int x, int y, int z){
int sum = x + y + z;
return sum;
}
')
cppFunction
a(1,2,3)
a(c(1,2,3))
add(1,2,3)
add
sourceCpp('mean_c.cpp')
position
Position
help("Position")
f <- function(x) if(x == 2) TRUE else FALSE
list(1,2,3,4)
Position(f, list(1,2,3,4))
Position(f, list(sample(5,3)))
sample(5,3)
list(sample(5,3))
list
alist(sample(5,3))
